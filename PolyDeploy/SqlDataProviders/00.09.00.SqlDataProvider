/************************************************************/
/***** SqlDataProvider                                  *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/
/*** Cantarus_PolyDeploy v0.9.0                           ***/
/************************************************************/

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_DropUQConstraints STORED PROCEDURE **********************************************/
/***                                                                                                   ***/
/*** Add stored procedure for dropping unnamed unique constraints.                                     ***/
/*********************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints]
GO

/*
    This procedure allows the easy deletion of unnamed unique constraints.

    When a constraint is created without a name being specified SQL server will
    generate a random name for the constraint based on the constraint type, the
    table name and a random number. It's difficult to drop these constraints
    using statements as the constraint will have a different name on every
    installation.

    This procedure allows you to pass a table name (without the
    'Cantarus_PolyDeploy_' prefix) and a column name within that table. It will
    look up the name of the unique constraint (if there is one) and
    automatically execute the statement required to drop the constraint.

    Note: The second AND statment within the WHERE clause makes use of the LEFT
    operator. This is because when the database owner token is replaced it
    includes the trailing '.'. Using LEFT with CHARINDEX allows us to use the
    database owner token to match the appropriate schema.
*/
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints]
    @TableName [VARCHAR](64),
    @ColumnName [VARCHAR](32)
AS
    DECLARE @ConstraintName [VARCHAR](128)

    SET @ConstraintName = (
        SELECT [con].[CONSTRAINT_NAME]
            FROM [INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] AS [con]
            JOIN [sys].[key_constraints] AS [syscon]
                ON [syscon].[name] = [con].[CONSTRAINT_NAME]
            WHERE [con].[TABLE_NAME] = CONCAT('{objectQualifier}Cantarus_PolyDeploy_', @TableName)
                AND [con].[COLUMN_NAME] = @ColumnName
                AND [con].[TABLE_SCHEMA] = LEFT('{databaseOwner}', CHARINDEX('.', '{databaseOwner}') - 1)
                AND [syscon].[type] = 'UQ'
    )

    IF (@ConstraintName IS NOT NULL)
        BEGIN
            EXEC('ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_' + @TableName + '] DROP CONSTRAINT ' + @ConstraintName);
        END
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_APIUsers TABLE ******************************************************************/
/***                                                                                                   ***/
/*** Rename existing APIUsers table so it can be used in the upgrade process after the application     ***/
/*** restarts. Create new APIUsers table with the new structure.                                       ***/
/*********************************************************************************************************/

IF EXISTS(SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUsers]') AND OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        EXEC sp_rename '{objectQualifier}Cantarus_PolyDeploy_APIUsers', '{objectQualifier}Cantarus_PolyDeploy_APIUsers_PreEncryption'
        EXEC sp_rename 'PK_{objectQualifier}Cantarus_PolyDeploy_APIUsers', 'PK_{objectQualifier}Cantarus_PolyDeploy_APIUsers_PreEncryption'
        EXEC sp_rename '{objectQualifier}DF_Cantarus_PolyDeploy_APIUsers_BypassIPWhitelist', '{objectQualifier}DF_Cantarus_PolyDeploy_APIUsers_PreEncryption_BypassIPWhitelist'
    END
GO

IF NOT EXISTS(SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUsers]') AND OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        CREATE TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUsers]
        (
            [APIUserID]         [INT] NOT NULL IDENTITY,
            [Name]              [NVARCHAR](64) NOT NULL,
            [APIKey_Sha]        [CHAR](64) NOT NULL,
            [EncryptionKey_Enc] [CHAR](172) NOT NULL,
            [Salt]              [CHAR](32) NOT NULL,
            [BypassIPWhitelist] [BIT] NOT NULL
                CONSTRAINT [DF_{objectQualifier}Cantarus_PolyDeploy_APIUsers_BypassIPWhitelist]
                    DEFAULT (0),

            CONSTRAINT [PK_{objectQualifier}Cantarus_PolyDeploy_APIUsers]
                PRIMARY KEY CLUSTERED ([APIUserID]),

            CONSTRAINT [UQ_{objectQualifier}Cantarus_PolyDeploy_APIUsers_Name]
                UNIQUE ([Name]),
            CONSTRAINT [UQ_{objectQualifier}Cantarus_PolyDeploy_APIUsers_APIKey_Sha]
                UNIQUE ([APIKey_Sha]),
            CONSTRAINT [UQ_{objectQualifier}Cantarus_PolyDeploy_APIUsers_EncryptionKey_Enc]
                UNIQUE ([EncryptionKey_Enc]),
            CONSTRAINT [UQ_{objectQualifier}Cantarus_PolyDeploy_APIUsers_Salt]
                UNIQUE ([Salt])
        )
    END
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_IPSpecs TABLE *******************************************************************/
/***                                                                                                   ***/
/*** Replace the unnamed unique constraint on the Address column with a named one.                     ***/
/*********************************************************************************************************/

IF EXISTS(SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_IPSpecs]') AND OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        EXEC {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints] @TableName = 'IPSpecs', @ColumnName = 'Address'

        ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_IPSpecs] ADD CONSTRAINT [UQ_{objectQualifier}Cantarus_PolyDeploy_IPSpecs_Address] UNIQUE ([Address])

        ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_IPSpecs] REBUILD
    END
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_Sessions TABLE ******************************************************************/
/***                                                                                                   ***/
/*** Replace the unnamed unique constraint on the Guid column with a named one. Modify the data types  ***/
/*** of the Guid and Response columns.                                                                 ***/
/*********************************************************************************************************/

IF EXISTS(SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_Sessions]') AND OBJECTPROPERTY(id, N'IsTable') = 1)
    BEGIN
        EXEC {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints] @TableName = 'Sessions', @ColumnName = 'Guid'

        ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_Sessions] ALTER COLUMN [Guid] [CHAR](32) NOT NULL
        ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_Sessions] ALTER COLUMN [Response] [NVARCHAR](MAX)

        ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_Sessions] ADD CONSTRAINT [UQ_{objectQualifier}Cantarus_PolyDeploy_Sessions_Guid] UNIQUE ([Guid])

        ALTER TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_Sessions] REBUILD
    END
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_DropUQConstraints STORED PROCEDURE **********************************************/
/***                                                                                                   ***/
/*** Drop thie DropUQConstraints procedure as it's no longer needed after this point.                  ***/
/*********************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_DropUQConstraints]
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_APIUserByAPIKey STORED PROCEDURE ************************************************/
/***                                                                                                   ***/
/*** Create the stored procedure needed to retrieve APIUsers from the database.                        ***/
/*********************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUserByAPIKey]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUserByAPIKey]
GO

/*
    This procedure provides a mechanism to easily retrieve an APIUser by its
    api key.

    As each APIUser's api key is only stored as a salted and hashed value in
    the APIKey_Sha field it's not possible to just use a plain api key to
    retrieve that user from the database. The plain api key must be salted and
    hashed using the stored salt for the APIUser before a comparison can be
    made. Performing this within the application would involve retrieving all
    the APIUser objects from the database and testing them individually.

    This procedure allows the application to pass a plain api key in and have
    it tested against every APIUser object in the database. As this is
    happening within the database engine rather than the application, it should
    perform much better.

    The basic procedure is as follows:
    - Concatenate plain api key with stored salt
    - Produce hashed bytes of the concatenated value using SHA256
    - Convert the hashed bytes to a string for comparison

    Note: The third paramater passed to CONVERT removes the leading '0x' from
    the returned value.
    (https://docs.microsoft.com/en-us/sql/t-sql/functions/cast-and-convert-transact-sql#binary-styles)
*/
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUserByAPIKey]
    @ApiKey [VARCHAR](64)
AS
    SELECT *
        FROM {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUsers]
        WHERE [APIKey_Sha] = CONVERT([VARCHAR](64), HASHBYTES('SHA2_256', CONCAT(@ApiKey, [Salt])), 2)
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_SpExists STORED PROCEDURE *******************************************************/
/***                                                                                                   ***/
/*** Create a stored procedure to easily determine if a stored procedure exists.                       ***/
/*********************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_SpExists]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_SpExists]
GO

/*
    This procedure makes it easy to determine if a named stored procedure
    exists. It's used as part of the logic for when to run upgrade code.
*/
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_SpExists]
    @SpName [NVARCHAR](256)
AS
    SELECT CASE WHEN EXISTS (
        SELECT *
        FROM dbo.sysobjects
        WHERE id = object_id(@SpName)
        AND OBJECTPROPERTY(id, N'IsProcedure') = 1
    )
    THEN CAST(1 AS BIT)
    ELSE CAST(0 AS BIT)
    END
GO

/*********************************************************************************************************/
/*** Cantarus_PolyDeploy_PostUpgrade_00.09.00 STORED PROCEDURE *******************************************/
/***                                                                                                   ***/
/*** Create the stored procedure that will be called by the upgrade process after application restart. ***/
/*********************************************************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_PostUpgrade_00.09.00]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_PostUpgrade_00.09.00]
GO

/*
    This procedure makes any neccesary database changes that are needed after
    the post upgrade code has been run on application restart.

    This procedure should be dropped by the upgrade code after it has been executed.
*/
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_PostUpgrade_00.09.00]
AS
    IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUsers_PreEncryption]'))
        DROP TABLE {databaseOwner}[{objectQualifier}Cantarus_PolyDeploy_APIUsers_PreEncryption]
    GO
GO
